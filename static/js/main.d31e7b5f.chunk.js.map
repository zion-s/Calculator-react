{"version":3,"sources":["Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","currentValue","display","operandPending","operator","digit","this","setState","String","indexOf","charAt","substr","value","parseFloat","nextOperator","input","console","log","result","prevValue","nextValue","length","substring","num","Math","sqrt","pow","className","toLocaleString","href","onClick","handlePercentage","handleSqrt","handleExpon","handleFraction","handleClearDisplay","handleDelete","handleOperation","handleDigits","handleSign","handleDot","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d31e7b5f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nexport default class Calculator extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentValue: null,\r\n      display: '0',\r\n      operandPending: false,\r\n      operator: null\r\n    };\r\n  }\r\n\r\n  handleDigits(digit) {\r\n    if (this.state.operandPending) {\r\n      this.setState({\r\n        display: String(digit),\r\n        operandPending: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        display: this.state.display === '0' ? String(digit) : this.state.display + digit\r\n      });\r\n    }\r\n  }\r\n\r\n  handleDot() {\r\n    const display = this.state.display;\r\n    if (this.state.operandPending) {\r\n      this.setState({\r\n        display: '.',\r\n        operandPending: false\r\n      });\r\n    } else if (display.indexOf('.') === -1) {\r\n      this.setState({\r\n        display: this.state.display + '.',\r\n        operandPending: false\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClearDisplay() {\r\n    this.setState({\r\n      currentValue: null,\r\n      display: '0',\r\n      operandPending: false,\r\n      operator: null\r\n    });\r\n  }\r\n\r\n  handleSign() {\r\n    this.setState({\r\n      display: this.state.display.charAt(0) === '-' ? this.state.display.substr(1) : '-' + this.state.display\r\n    });\r\n  }\r\n\r\n  handlePercentage() {\r\n    const value = parseFloat(this.state.display);\r\n    this.setState({\r\n      display: String(value / 100)\r\n    });\r\n  }\r\n\r\n  handleOperation(nextOperator) {\r\n    const display = this.state.display;\r\n    const operator = this.state.operator;\r\n    const value = this.state.currentValue;\r\n    const input = parseFloat(display);\r\n\r\n    const operations = {\r\n      '/': (prevValue, nextValue) => prevValue / nextValue,\r\n      '*': (prevValue, nextValue) => prevValue * nextValue,\r\n      '+': (prevValue, nextValue) => prevValue + nextValue,\r\n      '-': (prevValue, nextValue) => prevValue - nextValue,\r\n      '=': (prevValue, nextValue) => nextValue\r\n    }\r\n    \r\n    if (value === null) {\r\n      this.setState({\r\n        currentValue: input\r\n      });\r\n      console.log(input);\r\n    } else if (operator) {\r\n      const currentValue = value || 0;\r\n      const result = operations[operator](currentValue, input);\r\n\r\n      this.setState({\r\n        currentValue: result,\r\n        display: String(result)\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      operandPending: true,\r\n      operator: nextOperator\r\n    })\r\n  }\r\n\r\n  handleDelete() {\r\n    const display = this.state.display;\r\n    if (display !== '0' && display.length > 1) {\r\n      this.setState({\r\n        display: display.substring(0, display.length - 1)\r\n      });\r\n    } else if (display.length === 1) {\r\n      this.setState({\r\n        display: '0'\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSqrt() {\r\n    const num = parseFloat(this.state.display);\r\n    this.setState({\r\n      display: Math.sqrt(num)\r\n    })\r\n  }\r\n\r\n  handleExpon() {\r\n    const num = parseFloat(this.state.display);\r\n    this.setState({\r\n      display: Math.pow(num, 2)\r\n    })\r\n  }\r\n\r\n  handleFraction() {\r\n    const num = parseFloat(this.state.display);\r\n    this.setState({\r\n      display: 1/num\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <div className=\"keys\">\r\n            <div className=\"display\">{parseFloat(this.state.display).toLocaleString()}</div>\r\n            <a href=\"#\" className=\"btn btn-default\" onClick={() => this.handlePercentage()}>%</a>\r\n            <a href=\"#\" className=\"btn btn-default\" onClick={() => this.handleSqrt()}>&radic;</a>\r\n            <a href=\"#\" className=\"btn btn-default\" onClick={() => this.handleExpon()}><em>x</em><sup>2</sup></a>\r\n            <a href=\"#\" className=\"btn btn-default\" onClick={() => this.handleFraction()}>1&frasl;<em>x</em></a>\r\n            <a href=\"#\" className=\"btn btn-default\">CE</a>\r\n            <a href=\"#\" className=\"btn btn-default clear\" onClick={() => this.handleClearDisplay()}>C</a>\r\n            <a href=\"#\" className=\"btn btn-default\" onClick={() => this.handleDelete()}>DEL</a>\r\n            <a href=\"#\" className=\"btn btn-default operator\" onClick={() => this.handleOperation('/')}>รท</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(7)}>7</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(8)}>8</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(9)}>9</a>\r\n            <a href=\"#\" className=\"btn btn-default operator\" onClick={() => this.handleOperation('*')}>ร</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(4)}>4</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(5)}>5</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(6)}>6</a>\r\n            <a href=\"#\" className=\"btn btn-default operator\" onClick={() => this.handleOperation('-')}>-</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(3)}>3</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(2)}>2</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(1)}>1</a>\r\n            <a href=\"#\" className=\"btn btn-default operator\" onClick={() => this.handleOperation('+')}>+</a>\r\n            <a href=\"#\" className=\"btn btn-default\" onClick={() => this.handleSign()}>&plusmn;</a>\r\n            <a href=\"#\" className=\"btn btn-default digit\" onClick={() => this.handleDigits(0)}>0</a>\r\n            <a href=\"#\" className=\"btn btn-default decimal\" onClick={() => this.handleDot()}><b>.</b></a>\r\n            <a href=\"#\" className=\"btn btn-default equals\" onClick={() => this.handleOperation('=')}>=</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport Calculator from './Calculator';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"main\">\n          <Calculator />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}